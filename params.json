{"name":"Trigger","tagline":"Superior events for single page web apps.","body":"##### Because custom events should be easy...\r\n\r\nDownload: [trigger.min.js][prod]  or  [trigger.js][dev]  \r\nBower: `bower install trigger`  \r\n[NPM][npm]: `npm install trigger`  \r\n[NuGet][]: `Install-Package trigger`  \r\n\r\n[NuGet]: http://nuget.org/packages/trigger/\r\n[prod]: https://raw.github.com/nbubna/trigger/master/dist/trigger.min.js\r\n[dev]: https://raw.github.com/nbubna/trigger/master/dist/trigger.js\r\n[npm]: https://npmjs.org/package/trigger\r\n\r\n#### Meaningless Events Are Lame\r\nEvents like 'click' and 'keyup' are meaningless to the models and logic of most applications,\r\nbut i bet you still register listeners for them in your application's code. This is lame.\r\n\r\nYour application code only needs to know what a particular event means\r\n(e.g. 'save', 'delete', 'next', etc). Your app's ideal javascript would only\r\nregister listeners for events that are meaningful to your specific application (i.e. custom events).\r\n\r\n### Declarative Application Events Are Better\r\nAdd trigger.js to your page, then simply declare what 'click' means in your markup:\r\n```html\r\n<button click=\"save\">Save</button>\r\n```\r\nWhen the user \"clicks\" it, a 'save' event is automatically created and dispatched on the element.\r\nYour application never needs to listen for a click event again. This makes your JavaScript more\r\nreadable and your HTML more self-explanatory.\r\n\r\nMost people can get by with just declaring the meaning of clicks,\r\nbut you can easily add other native events as additional triggers:  \r\n```html\r\n<html trigger-add=\"dblclick drop\">\r\n...\r\n<div class=\"folder\" dblclick=\"open\" drop=\"move\">...</div>\r\n```\r\n\r\n\r\n#### Dependent Events Are Tricky\r\nSometimes a single \"click\" serves as a trigger for a sequence of application actions.\r\nThe simpler apps out there just conflate the actions into one `$(form).click(saveIfValid)`.\r\nMore advanced developers might register multiple listeners for the same event and\r\nuse `event.stopImmediatePropogation();` when you need to break the sequence.\r\nBut both approaches (and most varieties of them) are fundamentally hacks to workaround\r\nyou wanting a single browser event to start a sequence of application events.\r\nThere is a better way...\r\n\r\n### Declaring Event Sequences Is Easy\r\n```html\r\n<input type=\"submit\" click=\"validate save\">\r\n```\r\nThis will trigger the \"validate\" and \"save\" events in sequence.\r\nYour list of events can be as long as you like. Any event handler can just call\r\n`event.stopSequence()` to stop the rest of the specific, declared sequence.\r\nThen, if you like, you can call `event.resumeSequence()` to restart it where you left off.\r\nAnd of course, check on the state of things with `event.isSequenceStopped()`.\r\n\r\n\r\n#### Asynchronous Handlers Make Messes\r\nOnce you are used to chaining events into nice declarative sequences,\r\nyou will likely come upon a situation where one of the handlers needs to do something\r\nasynchronous (e.g. validate something on the server) before the subsequent events are\r\ntriggered. To keep things event-y, you do a manual `trigger('save');` call at\r\nthe end of the success callback for your async business.  But this means your nice\r\ndeclarative `<button click=\"validate save\">Save</button>` element becomes a\r\nconfusing `<button click=\"validate\">Save</button>`.\r\n\r\n### Promise-Friendly Event Sequences Are Clean And Tidy\r\nIt's easy, get yourself a [promise][] in that `validate` event handler and set it\r\non the event (e.g. `event.stopSequence(promise);`). This stops the event sequence\r\nand automatically resumes it again once the promise is fulfilled. Now you\r\ncan have your straightforward `click=\"validate save\"` button back!\r\n\r\n[promise]: http://wiki.commonjs.org/wiki/Promises/A\r\n\r\n\r\n#### Simplistic Events Can Be Awkward\r\nOnce you've earned your \"Application Events\" achievement, you may realize you are only declaring\r\nevents as disconnected verbs or nouns, or maybe awkward verbNouns. Your listeners have to\r\nglean information from the context or target element to decipher the full meaning of the event.\r\nThis can easily lead you away from descriptive code and into \"use comments to explain\" territory.\r\nSometimes that simplicity is good, but sometimes it is a real problem.\r\n\r\n### Grammatically Rich Events Can Be Graceful\r\ntrigger.js provides a declarative syntax for grammatically rich events.\r\nThis helps you level-up the self-documentation of your javascript and HTML\r\nand simplify your event listeners.\r\n\r\n##### click=\"category:type\" -> event.category\r\nWhen you need to distinguish your player's \"move\" event from that of a different feature,\r\nprefix your event with a category (subject/noun): `click=\"player:move\"`.\r\nAny app-wide 'move' listener can read it from the `event.category` property.\r\n\r\n##### click=\"type['constant','other']\" -> event.constants\r\nTo include contextual constants (object/noun) for your event, do: `click=\"view['start']\"`\r\nThe constant gets the JSON.parse() treatment (after some quote massaging) and\r\nis set at `event.constants` (always in an array, thus the brackets);\r\n\r\n##### click=\"type#tag\" -> event.tags & event[tag]\r\nFinally, you can add simple tags (adjectives/adverbs) to your events, each prefixed by '#':\r\n`click=\"move#up#left\"` and listen for these at `event.tags` and each `event[tag]`\r\n(the individual tags are always given a value of `true`).\r\n\r\nNOTE: If you have a reason to use combinations of all three (probably rare),\r\nthen you ***must*** put them in this order: `category:type['constant']#tags`\r\n(e.g. `click=\"player:move[{'speed':2}]#west\"`).\r\nThink of it as subject, verb, object, adjectives and you probably won't forget how it goes.\r\n\r\n\r\n\r\n#### But HTML Validation?!\r\nYou probably understand why [HTML validation is considered harmful][invalid],\r\nbut your pointy-haired boss still labors under the naive impression that it is a best practice.\r\n\r\n### Ok, fine, you can have your 'data-' prefix\r\n```html\r\n<html data-trigger=\"true\" data-trigger-add=\"dblclick\">\r\n...\r\n<button data-click=\"validateHTML\">\"be lame\"</button>\r\n```\r\n\r\n[invalid]: http://wheelcode.blogspot.com/2012/07/html-validation-is-bad.html\r\n\r\n#### But Old IE?!?\r\nYou aren't ready to abandon the poor saps still using ancient versions of IE.\r\nSure, Google stopped supporting them, but you aren't Google.\r\n\r\n#### Can do.\r\nJust use jQuery (of course) and this [tiny extension][old]:\r\n```html\r\n<!--[if lt IE 9]>\r\n  <script src=\"../src/trigger.old.js\"></script>\r\n<![endif]-->\r\n```\r\n\r\n[old]: https://raw.github.com/nbubna/trigger/master/src/trigger.old.js\r\n\r\n\r\n#### Another Small Extension\r\nIf you see yourself manually using trigger instead of always letting browser events\r\nserve as triggers and also happen to be fond of jQuery, [jquery.trigger.js][jquery]\r\nallows you to do `$('#foo').trigger('foo:squish#gooey');` instead of\r\n`trigger($('#foo')[0], 'foo:squish#gooey');`.\r\n\r\n[jquery]: https://raw.github.com/nbubna/trigger/master/src/jquery.trigger.js\r\n\r\n\r\n#### Short jQuery Version - For Those Who Don't Need All The Features\r\n```javascript\r\n$(document).on('click', function(e) {\r\n  var $el = $(e.target).closest('[click]'),\r\n      events = $el.attr('click') || '';\r\n  events.split(' ').forEach(function(event) {\r\n    $el.trigger(event);\r\n    if (!$(e.target).is('[type=radio],[type=checkbox]')) e.preventDefault();\r\n  });\r\n});\r\n```\r\n\r\n\r\n#### Mini-Example, Just For Fun\r\n```html\r\n<div id=\"#dungeonPlunge\">\r\n  <input type=\"dice\" name=\"roll\">\r\n  <button click=\"move#up nextPlayer\">Climb</button>  \r\n  <button click=\"move#down nextPlayer\">Slide</button>\r\n</div>\r\n```\r\n```javascript\r\nvar game = document.querySelector('#dungeonPlunge');\r\ngame.addEventListener('nextPlayer', function() {\r\n  player = player.next;\r\n});\r\ngame.addEventListener('move', function(e) {\r\n  var distance = game.querySelector('[name=roll]').value;\r\n  if (e.up) player.climb(distance);\r\n  if (e.down) player.slide(distance);\r\n  if (player.hasWon()) e.stopSequence();//blocks nextPlayer event\r\n});\r\n```\r\n  \r\n\r\n### Advanced Details\r\n##### 'click'-ish secrets\r\n * Clicks are ignored if their target was a user-editable field (e.g. textarea) that did not\r\nhave a click attribute itself, but was a child of an element that did have one.\r\n * Enter keyups (keyCode:13) are treated as clicks if their target lacks a \"native response\"\r\nto such events (e.g. in a textarea, it adds a new line, or on a link, it causes a click).\r\nThe exception being if such an element has a `keyup` or `key-enter` attribute declared on it.\r\n * When a click is used by trigger.js, it will automatically prevent the original event's\r\ndefault behavior, except in the case of radio buttons and checkboxes. The assumption is\r\nthat the default behavior is replaced by the declared event sequence.\r\n\r\n##### trigger._.special\r\nThis extension hook provides you the opportunity to change event types, with some particular\r\naid for tweaking events that have a 'which' or 'keyCode' important to you. Here's an example:\r\n\r\n```html\r\n<div tabIndex=\"0\" key-del=\"delete\" click=\"edit\">\r\n  <span>Nathan Bubna</span>\r\n  <input type=\"text\" key-esc=\"cancel\" key-enter=\"save\">\r\n</div>\r\n```\r\n```javascript\r\n$.extend(trigger._.special, {\r\n  keyup27: function(e){ return 'key-esc'; },\r\n  keyup46: function(e){ return 'key-del'; }\r\n});\r\n```\r\nNote: trigger.js already listens for `keyup` and `click` events. For other special events,\r\nlike keydown or dblclick, remember to do `<html trigger-add=\"keydown\">` or the like.\r\n\r\nTODO: add more advanced details...\r\n\r\n\r\n#### Release History\r\n* 2010-04-02 v0.1 (internal)\r\n* 2012-09-13 v0.3 (internal)\r\n* 2013-05-03 v0.9.0 (public) - First GitHub release\r\n* 2013-05-16 v1.0.0 (public) - tests and feature completeness\r\n* 2013-05-21 v1.1.0 (public) - declarative configuration\r\n* 2013-05-22 v1.1.1 (public) - fix build problem\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}